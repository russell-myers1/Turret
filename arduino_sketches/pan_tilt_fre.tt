#include <AccelStepper.h>

// -----------------------------
// Stepper Pins
// -----------------------------
#define STEP_PIN_PAN   8
#define DIR_PIN_PAN    9
#define STEP_PIN_TILT  2
#define DIR_PIN_TILT   3

AccelStepper stepperPan(AccelStepper::DRIVER, STEP_PIN_PAN, DIR_PIN_PAN);
AccelStepper stepperTilt(AccelStepper::DRIVER, STEP_PIN_TILT, DIR_PIN_TILT);

// -----------------------------
// Target positions
// -----------------------------
long targetPositionPan  = 0;
long targetPositionTilt = 0;

// -----------------------------
// Gel Blaster Control
// -----------------------------
const int triggerPin = 5;                // MOSFET/relay pin
const unsigned long fireDuration = 300;  // ms to run blaster
bool isFiring = false;
unsigned long fireStartTime = 0;

// -----------------------------
// Setup
// -----------------------------
void setup() {
  Serial.begin(115200);
  while (!Serial) { ; }  // optional on Uno

  // Stepper setup
  stepperPan.setMaxSpeed(4000);
  stepperPan.setAcceleration(20000);

  stepperTilt.setMaxSpeed(4000);
  stepperTilt.setAcceleration(20000);

  // Blaster setup
  pinMode(triggerPin, OUTPUT);
  digitalWrite(triggerPin, LOW);

  Serial.println("Arduino Pan-Tilt + Blaster Ready");
}

// -----------------------------
// Main Loop
// -----------------------------
void loop() {
  // Handle incoming serial commands
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim();

    // Movement command: "move:pan,tilt"
    if (input.startsWith("move:")) {
      input.remove(0, 5);  // strip "move:"

      int commaIndex = input.indexOf(',');
      if (commaIndex != -1) {
        String panStr = input.substring(0, commaIndex);
        String tiltStr = input.substring(commaIndex + 1);

        int panVal = panStr.toInt();
        int tiltVal = tiltStr.toInt();

        movePan(panVal);
        moveTilt(tiltVal);
      }
    }

    // Fire command: "FIRE"
    if (input.equalsIgnoreCase("FIRE") && !isFiring) {
      Serial.println("Firing!");
      digitalWrite(triggerPin, HIGH);
      fireStartTime = millis();
      isFiring = true;
    }
  }

  // Keep steppers moving
  stepperPan.run();
  stepperTilt.run();

  // Handle firing timeout
  if (isFiring && (millis() - fireStartTime >= fireDuration)) {
    digitalWrite(triggerPin, LOW);
    isFiring = false;
    Serial.println("Firing complete");
  }
}

// -----------------------------
// Movement functions
// -----------------------------
void movePan(long target) {
  targetPositionPan = target;
  stepperPan.moveTo(targetPositionPan);
}

void moveTilt(long target) {
  targetPositionTilt = target;
  stepperTilt.moveTo(targetPositionTilt);
}